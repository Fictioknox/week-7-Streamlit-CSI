# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bZdAtXYNFz7rIkh8DgTVV2xe6QAMTdv_
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Load data
iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = iris.target

# Split for training and evaluation
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

# Train model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Streamlit app
st.title("🔍 Iris Flower Classifier")
st.markdown("Enter measurements of an Iris flower to predict its species.")

# Sidebar inputs
st.sidebar.header("🌿 Input Features")
def get_user_input():
    sepal_length = st.sidebar.number_input('Sepal Length (cm)', 4.0, 8.0, 5.1)
    sepal_width = st.sidebar.number_input('Sepal Width (cm)', 2.0, 4.5, 3.5)
    petal_length = st.sidebar.number_input('Petal Length (cm)', 1.0, 7.0, 1.4)
    petal_width = st.sidebar.number_input('Petal Width (cm)', 0.1, 2.5, 0.2)
    features = {
        'sepal length (cm)': sepal_length,
        'sepal width (cm)': sepal_width,
        'petal length (cm)': petal_length,
        'petal width (cm)': petal_width
    }
    return pd.DataFrame(features, index=[0])

input_df = get_user_input()

# Predict
prediction = model.predict(input_df)[0]
prediction_proba = model.predict_proba(input_df)

# Output: Prediction
st.subheader("🌸 Prediction")
st.write(f"**Predicted species:** `{iris.target_names[prediction]}`")

# Output: Probabilities
st.subheader("📊 Prediction Probabilities")
proba_df = pd.DataFrame(prediction_proba, columns=iris.target_names)
st.dataframe(proba_df.T.rename(columns={0: 'Probability'}))

# Output: Confusion Matrix
st.subheader("📉 Model Performance on Test Data")
y_pred = model.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
fig, ax = plt.subplots()
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=iris.target_names)
disp.plot(ax=ax)
st.pyplot(fig)